"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var store_1 = require("./store");
var data_1 = require("./data");
describe('Store', function () {
    it('Set a string', function () {
        store_1.Store.set('myStr', 'The value of myStr.');
        expect(data_1.data.myStr).toEqual('The value of myStr.');
        store_1.Store.set('myStr', 'This is a new string.');
        expect(data_1.data.myStr).toEqual('This is a new string.');
    });
    it('Get a string', function () {
        store_1.Store.set('myStr', 'The value of myStr.');
        expect(store_1.Store.get('myStr')).toEqual('The value of myStr.');
    });
    it('Set a number', function () {
        store_1.Store.set('num123', 123);
        expect(data_1.data.num123).toEqual(123);
        store_1.Store.set('num0', 0);
        expect(data_1.data.num0).toEqual(0);
        store_1.Store.set('num_123', -123);
        expect(data_1.data.num_123).toEqual(-123);
    });
    it('Get a number', function () {
        store_1.Store.set('num123', 123);
        store_1.Store.set('num0', 0);
        store_1.Store.set('num_123', -123);
        expect(store_1.Store.get('num123')).toEqual(123);
        expect(store_1.Store.get('num0')).toEqual(0);
        expect(store_1.Store.get('num_123')).toEqual(-123);
    });
    it('Set a boolean', function () {
        store_1.Store.set('boolTrue', true);
        expect(data_1.data.boolTrue).toEqual(true);
        store_1.Store.set('boolFalse', false);
        expect(data_1.data.boolFalse).toEqual(false);
    });
    it('Get a boolean', function () {
        store_1.Store.set('boolTrue', true);
        store_1.Store.set('boolFalse', false);
        expect(store_1.Store.get('boolTrue')).toEqual(true);
        expect(store_1.Store.get('boolFalse')).toEqual(false);
    });
    it('Set a object', function () {
        store_1.Store.set('obj', { str: 'abc', num: 1, arr: ['aaa', 111], children: { key: 123 } });
        expect(data_1.data.obj).toEqual({ str: 'abc', num: 1, arr: ['aaa', 111], children: { key: 123 } });
        store_1.Store.set('objEmpty', {});
        expect(data_1.data.objEmpty).toEqual({});
    });
    it('Get a object', function () {
        store_1.Store.set('obj', { str: 'abc', num: 1, arr: ['aaa', 111], children: { key: 123 } });
        store_1.Store.set('objEmpty', {});
        expect(store_1.Store.get('obj')).toEqual({ str: 'abc', num: 1, arr: ['aaa', 111], children: { key: 123 } });
        expect(store_1.Store.get('obj.str')).toEqual('abc');
        expect(store_1.Store.get('obj.num')).toEqual(1);
        expect(store_1.Store.get('obj.num')).toEqual(1);
        expect(store_1.Store.get('objEmpty')).toEqual({});
    });
    it('Set a arr', function () {
        store_1.Store.set('arr', [{}, 'a', 1, true]);
        expect(data_1.data.arr).toEqual([{}, 'a', 1, true]);
    });
    it('Get a arr', function () {
        store_1.Store.set('arr', [{ child: 'child' }, 'a', 1, true]);
        expect(store_1.Store.get('arr')).toEqual([{ child: 'child' }, 'a', 1, true]);
        expect(store_1.Store.get('arr.0')).toEqual({ child: 'child' });
        expect(store_1.Store.get('arr.0.child')).toEqual('child');
        expect(store_1.Store.get('arr.1')).toEqual('a');
        expect(store_1.Store.get('arr.2')).toEqual(1);
        expect(store_1.Store.get('arr.3')).toEqual(true);
    });
    it('observers', function () {
        var subObj = store_1.Store.subcribe('obsObj', function (value) {
            console.log('obsObj changed:', value);
            expect(value).not.toBe(null);
        });
        var subA = store_1.Store.subcribe('obsObj.a', function (value) {
            console.log('obsObj.a changed:', value);
            expect(value).not.toBe(null);
        });
        var subB = store_1.Store.subcribe('obsObj.a.b', function (value) {
            console.log('obsObj.a.b changed:', value);
            expect(value).not.toBe(null);
        });
        store_1.Store.set('obsObj.num', 123);
        store_1.Store.set('obsObj.a.b', 456);
        data_1.data.obsObj.a.b = 789;
        store_1.Store.updated('obsObj.a.b');
        subObj.unsubcribe();
        subA.unsubcribe();
        subB.unsubcribe();
    });
});
//# sourceMappingURL=store.spec.js.map