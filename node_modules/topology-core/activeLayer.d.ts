import { Options } from './options';
import { Node } from './models/node';
import { Line } from './models/line';
import { Rect } from './models/rect';
import { Point } from './models/point';
import { TopologyData } from './models/data';
export declare class ActiveLayer {
    options: Options;
    protected data: TopologyData;
    rotateCPs: Point[];
    sizeCPs: Point[];
    rect: Rect;
    nodes: Node[];
    lines: Line[];
    rotate: number;
    initialSizeCPs: Point[];
    nodeRects: Rect[];
    childrenRects: {
        [key: string]: Rect;
    };
    dockWatchers: Point[];
    rotating: boolean;
    constructor(options?: Options);
    calcControlPoints(): void;
    locked(): boolean;
    getPoints(): Point[];
    clear(): void;
    saveNodeRects(): void;
    private saveChildrenRects;
    resizeNodes(type: number, pt: Point): void;
    calcResizedPos(rect: Rect, initRect: Rect, pos: Point, xScale: number, yScale: number): void;
    moveNodes(x: number, y: number): void;
    updateChildren(node: Node): void;
    updateLines(nodes?: Node[]): void;
    changeLineType(): void;
    offsetRotate(angle: number): void;
    updateRotate(): void;
    addNode(node: Node): void;
    setNodes(nodes: Node[]): void;
    hasNode(node: Node): boolean;
    setLines(lines: Line[]): void;
    addLine(line: Line): void;
    render(ctx: CanvasRenderingContext2D): void;
    getDockWatchers(): void;
    alignNodes(align: string): void;
}
