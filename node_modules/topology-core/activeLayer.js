"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var le5le_store_1 = require("le5le-store");
var node_1 = require("./models/node");
var line_1 = require("./models/line");
var rect_1 = require("./models/rect");
var point_1 = require("./models/point");
var status_1 = require("./models/status");
var middles_1 = require("./middles");
var ActiveLayer = /** @class */ (function () {
    function ActiveLayer(options) {
        if (options === void 0) { options = {}; }
        this.options = options;
        this.data = le5le_store_1.Store.get('topology-data');
        this.rotateCPs = [];
        this.sizeCPs = [];
        this.nodes = [];
        this.lines = [];
        this.rotate = 0;
        // 备份初始位置，方便移动事件处理
        this.initialSizeCPs = [];
        this.nodeRects = [];
        this.childrenRects = {};
        // nodes移动时，停靠点的参考位置
        this.dockWatchers = [];
        this.rotating = false;
        le5le_store_1.Store.set('LT:ActiveLayer', this);
        if (!this.options.activeColor) {
            this.options.activeColor = '#d4380d';
        }
    }
    ActiveLayer.prototype.calcControlPoints = function () {
        if (this.nodes.length === 1) {
            this.rect = this.nodes[0].rect;
            this.sizeCPs = this.nodes[0].rect.toPoints();
            this.rotateCPs = [
                new point_1.Point(this.nodes[0].rect.x + this.nodes[0].rect.width / 2, this.nodes[0].rect.y - 35),
                new point_1.Point(this.nodes[0].rect.x + this.nodes[0].rect.width / 2, this.nodes[0].rect.y)
            ];
            if (this.rotate || this.nodes[0].rotate) {
                for (var _i = 0, _a = this.sizeCPs; _i < _a.length; _i++) {
                    var pt = _a[_i];
                    if (this.nodes[0].rotate) {
                        pt.rotate(this.nodes[0].rotate, this.nodes[0].rect.center);
                    }
                    if (this.rotate) {
                        pt.rotate(this.rotate, this.rect.center);
                    }
                }
                for (var _b = 0, _c = this.rotateCPs; _b < _c.length; _b++) {
                    var pt = _c[_b];
                    if (this.nodes[0].rotate) {
                        pt.rotate(this.nodes[0].rotate, this.nodes[0].rect.center);
                    }
                    if (this.rotate) {
                        pt.rotate(this.rotate, this.rect.center);
                    }
                }
            }
            if (this.options.hideRotateCP) {
                this.rotateCPs = [new point_1.Point(-1000, -1000), new point_1.Point(-1000, -1000)];
            }
            return;
        }
        var x1 = 99999;
        var y1 = 99999;
        var x2 = -99999;
        var y2 = -99999;
        var pts = this.getPoints();
        for (var _d = 0, pts_1 = pts; _d < pts_1.length; _d++) {
            var item = pts_1[_d];
            if (x1 > item.x) {
                x1 = item.x;
            }
            if (y1 > item.y) {
                y1 = item.y;
            }
            if (x2 < item.x) {
                x2 = item.x;
            }
            if (y2 < item.y) {
                y2 = item.y;
            }
        }
        this.rect = new rect_1.Rect(x1, y1, x2 - x1, y2 - y1);
        this.sizeCPs = [new point_1.Point(x1, y1), new point_1.Point(x2, y1), new point_1.Point(x2, y2), new point_1.Point(x1, y2)];
        this.rotateCPs = [new point_1.Point(x1 + (x2 - x1) / 2, y1 - 35), new point_1.Point(x1 + (x2 - x1) / 2, y1)];
        if (this.options.hideRotateCP) {
            this.rotateCPs = [new point_1.Point(-1000, -1000), new point_1.Point(-1000, -1000)];
        }
    };
    ActiveLayer.prototype.locked = function () {
        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
            var item = _a[_i];
            if (!item.locked) {
                return false;
            }
        }
        for (var _b = 0, _c = this.lines; _b < _c.length; _b++) {
            var item = _c[_b];
            if (!item.locked) {
                return false;
            }
        }
        return true;
    };
    ActiveLayer.prototype.getPoints = function () {
        var points = [];
        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
            var item = _a[_i];
            var pts = item.rect.toPoints();
            if (item.rotate) {
                for (var _b = 0, pts_2 = pts; _b < pts_2.length; _b++) {
                    var pt = pts_2[_b];
                    pt.rotate(item.rotate, item.rect.center);
                }
            }
            points.push.apply(points, pts);
        }
        return points;
    };
    ActiveLayer.prototype.clear = function () {
        this.lines = [];
        this.nodes = [];
        this.sizeCPs = [];
        this.rotateCPs = [];
        le5le_store_1.Store.set('LT:activeNode', null);
    };
    // 即将缩放选中的nodes，备份nodes最初大小，方便缩放比例计算
    ActiveLayer.prototype.saveNodeRects = function () {
        this.nodeRects = [];
        this.childrenRects = {};
        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
            var item = _a[_i];
            this.nodeRects.push(new rect_1.Rect(item.rect.x, item.rect.y, item.rect.width, item.rect.height));
            this.saveChildrenRects(item);
        }
        this.initialSizeCPs = [];
        for (var _b = 0, _c = this.sizeCPs; _b < _c.length; _b++) {
            var item = _c[_b];
            var pt = item.clone();
            // Cancel rotate while it is a single node. For yScale will < 0 and error.
            if (this.nodes.length === 1 && this.nodes[0].rotate) {
                pt.rotate(-this.nodes[0].rotate, this.nodes[0].rect.center);
            }
            this.initialSizeCPs.push(pt);
        }
        this.getDockWatchers();
    };
    ActiveLayer.prototype.saveChildrenRects = function (node) {
        if (!node.children) {
            return;
        }
        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
            var item = _a[_i];
            this.childrenRects[item.id] = new rect_1.Rect(item.rect.x, item.rect.y, item.rect.width, item.rect.height);
            this.saveChildrenRects(item);
        }
    };
    ActiveLayer.prototype.resizeNodes = function (type, pt) {
        var i = 0;
        var pos = new point_1.Point(0, 0);
        var x;
        var y;
        var w;
        var h;
        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
            var item = _a[_i];
            switch (type) {
                // nw-resize
                case 0:
                    x = pt.x;
                    y = pt.y;
                    w = this.initialSizeCPs[2].x - pt.x;
                    h = this.initialSizeCPs[2].y - pt.y;
                    pos.x = w > 5 ? x : this.initialSizeCPs[2].x - 5;
                    pos.y = h > 5 ? y : this.initialSizeCPs[2].y - 5;
                    break;
                // ne-resize
                case 1:
                    y = pt.y;
                    w = pt.x - this.initialSizeCPs[0].x;
                    h = this.initialSizeCPs[2].y - pt.y;
                    pos.x = this.initialSizeCPs[0].x;
                    pos.y = h > 5 ? y : this.initialSizeCPs[2].y - 5;
                    break;
                // se-resize
                case 2:
                    w = pt.x - this.initialSizeCPs[0].x;
                    h = pt.y - this.initialSizeCPs[0].y;
                    pos.x = this.initialSizeCPs[0].x;
                    pos.y = this.initialSizeCPs[0].y;
                    break;
                // sw-resize
                case 3:
                    x = pt.x;
                    w = this.initialSizeCPs[2].x - pt.x;
                    h = pt.y - this.initialSizeCPs[0].y;
                    pos.x = w > 5 ? x : this.initialSizeCPs[2].x - 5;
                    pos.y = this.initialSizeCPs[0].y;
                    break;
            }
            w = w > 5 ? w : 5;
            h = h > 5 ? h : 5;
            var scaleX = w / (this.initialSizeCPs[2].x - this.initialSizeCPs[0].x);
            var scaleY = h / (this.initialSizeCPs[2].y - this.initialSizeCPs[0].y);
            this.calcResizedPos(item.rect, this.nodeRects[i], pos, scaleX, scaleY);
            item.rect.floor();
            item.rect.calceCenter();
            item.init();
            item.elementRendered = false;
            this.updateChildren(item);
            ++i;
        }
        this.updateLines();
    };
    // 当initialOccupy缩放为occupy后，计算node在occupy中的新位置
    // initRect - node的原始位置
    // xScale - x坐标缩放比例
    // yScale - y坐标缩放比例
    ActiveLayer.prototype.calcResizedPos = function (rect, initRect, pos, xScale, yScale) {
        rect.x = pos.x + (initRect.x - this.initialSizeCPs[0].x) * xScale;
        rect.y = pos.y + (initRect.y - this.initialSizeCPs[0].y) * yScale;
        rect.width = initRect.width * xScale;
        rect.height = initRect.height * yScale;
        rect.ex = rect.x + rect.width;
        rect.ey = rect.y + rect.height;
    };
    ActiveLayer.prototype.moveNodes = function (x, y) {
        if (this.nodeRects.length !== this.nodes.length) {
            return;
        }
        var i = 0;
        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.locked) {
                continue;
            }
            var offsetX = this.nodeRects[i].x + x - item.rect.x;
            var offsetY = this.nodeRects[i].y + y - item.rect.y;
            item.translate(offsetX, offsetY);
            this.updateChildren(item);
            if (item.parentId && item.stand) {
                var parent_1 = void 0;
                for (var _b = 0, _c = this.data.nodes; _b < _c.length; _b++) {
                    var n = _c[_b];
                    if (n.id === item.parentId) {
                        parent_1 = n;
                        break;
                    }
                }
                item.calcRectInParent(parent_1);
            }
            ++i;
        }
        this.updateLines();
        if (this.options.on) {
            this.options.on('moveNodes', this.nodes);
        }
    };
    ActiveLayer.prototype.updateChildren = function (node) {
        if (!node.children) {
            return;
        }
        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
            var item = _a[_i];
            item.calcChildRect(node);
            item.init();
            this.updateChildren(item);
        }
    };
    ActiveLayer.prototype.updateLines = function (nodes) {
        if (!nodes) {
            nodes = this.nodes;
        }
        for (var _i = 0, _a = this.data.lines; _i < _a.length; _i++) {
            var line = _a[_i];
            for (var _b = 0, nodes_1 = nodes; _b < nodes_1.length; _b++) {
                var item = nodes_1[_b];
                if (line.from.id === item.id) {
                    line.from.x = item.rotatedAnchors[line.from.anchorIndex].x;
                    line.from.y = item.rotatedAnchors[line.from.anchorIndex].y;
                }
                if (line.to.id === item.id) {
                    line.to.x = item.rotatedAnchors[line.to.anchorIndex].x;
                    line.to.y = item.rotatedAnchors[line.to.anchorIndex].y;
                }
                line.textRect = null;
                le5le_store_1.Store.set('pts-' + line.id, null);
                if (item.children) {
                    this.updateLines(item.children);
                }
            }
        }
    };
    ActiveLayer.prototype.changeLineType = function () {
        for (var _i = 0, _a = this.lines; _i < _a.length; _i++) {
            var item = _a[_i];
            item.calcControlPoints();
        }
    };
    ActiveLayer.prototype.offsetRotate = function (angle) {
        this.rotating = true;
        var i = 0;
        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
            var item = _a[_i];
            var center = this.nodeRects[i].center.clone();
            if (this.nodes.length > 1) {
                center.rotate(angle, this.rect.center);
            }
            item.rect.x = center.x - item.rect.width / 2;
            item.rect.y = center.y - item.rect.height / 2;
            item.rect.ex = item.rect.x + item.rect.width;
            item.rect.ey = item.rect.y + item.rect.height;
            item.rect.calceCenter();
            item.init();
            item.offsetRotate = angle;
            item.calcRotateAnchors(item.rotate + item.offsetRotate);
            this.updateChildren(item);
            ++i;
        }
        this.rotate = angle;
        if (this.options.on) {
            this.options.on('rotateNodes', this.nodes);
        }
    };
    ActiveLayer.prototype.updateRotate = function () {
        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
            var item = _a[_i];
            item.rotate += item.offsetRotate;
            item.offsetRotate = 0;
        }
        this.rotate = 0;
        this.rotating = false;
    };
    ActiveLayer.prototype.addNode = function (node) {
        this.nodes.push(node);
        if (this.nodes.length === 1) {
            le5le_store_1.Store.set('LT:activeNode', this.nodes[0]);
        }
    };
    ActiveLayer.prototype.setNodes = function (nodes) {
        this.nodes = nodes;
        this.lines = [];
        if (this.nodes.length === 1) {
            le5le_store_1.Store.set('LT:activeNode', this.nodes[0]);
        }
    };
    ActiveLayer.prototype.hasNode = function (node) {
        var found = false;
        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.id === node.id) {
                found = true;
                break;
            }
        }
        return found;
    };
    ActiveLayer.prototype.setLines = function (lines) {
        this.nodes = [];
        this.lines = lines;
    };
    ActiveLayer.prototype.addLine = function (line) {
        for (var _i = 0, _a = this.lines; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.id === line.id) {
                return;
            }
        }
        this.lines.push(line);
    };
    ActiveLayer.prototype.render = function (ctx) {
        if (this.data.locked > status_1.Lock.Readonly) {
            return;
        }
        if (!this.nodes.length && !this.lines.length) {
            return;
        }
        if (this.nodes.length === 1 || !this.rotating) {
            this.calcControlPoints();
        }
        ctx.save();
        ctx.strokeStyle = this.options.activeColor;
        ctx.fillStyle = '#fff';
        ctx.lineWidth = 1;
        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
            var item = _a[_i];
            var tmp = new node_1.Node(item);
            tmp.data = null;
            tmp.fillStyle = null;
            tmp.bkType = 0;
            tmp.icon = '';
            tmp.image = '';
            tmp.text = '';
            tmp.children = null;
            if (tmp.strokeStyle !== 'transparent') {
                tmp.strokeStyle = '#ffffff';
                tmp.lineWidth += 2;
                tmp.render(ctx);
                tmp.strokeStyle = this.options.activeColor;
                tmp.lineWidth -= 2;
            }
            tmp.render(ctx);
        }
        for (var _b = 0, _c = this.lines; _b < _c.length; _b++) {
            var item = _c[_b];
            if (!item.to) {
                continue;
            }
            var tmp = new line_1.Line(item);
            if (tmp.lineWidth < 3) {
                var bk = new line_1.Line(item);
                bk.strokeStyle = '#ffffff';
                bk.render(ctx);
            }
            tmp.strokeStyle = this.options.activeColor;
            tmp.fromArrowColor = this.options.activeColor;
            tmp.toArrowColor = this.options.activeColor;
            tmp.render(ctx);
            middles_1.drawLineFns[item.name].drawControlPointsFn(ctx, item);
        }
        // This is diffence between single node and more.
        if (this.rotate && this.nodes.length > 1) {
            ctx.translate(this.rect.center.x, this.rect.center.y);
            ctx.rotate((this.rotate * Math.PI) / 180);
            ctx.translate(-this.rect.center.x, -this.rect.center.y);
        }
        // Occupied territory.
        ctx.save();
        ctx.globalAlpha = 0.3;
        ctx.translate(0.5, 0.5);
        ctx.beginPath();
        ctx.moveTo(this.sizeCPs[0].x, this.sizeCPs[0].y);
        ctx.lineTo(this.sizeCPs[1].x, this.sizeCPs[1].y);
        ctx.lineTo(this.sizeCPs[2].x, this.sizeCPs[2].y);
        ctx.lineTo(this.sizeCPs[3].x, this.sizeCPs[3].y);
        ctx.closePath();
        ctx.stroke();
        ctx.restore();
        if (this.data.locked || this.locked()) {
            ctx.restore();
            return;
        }
        // Draw rotate control point.
        ctx.beginPath();
        ctx.moveTo(this.rotateCPs[0].x, this.rotateCPs[0].y);
        ctx.lineTo(this.rotateCPs[1].x, this.rotateCPs[1].y);
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(this.rotateCPs[0].x, this.rotateCPs[0].y, 5, 0, Math.PI * 2);
        ctx.fill();
        ctx.stroke();
        // Draw size control points.
        ctx.lineWidth = 1;
        for (var _d = 0, _e = this.sizeCPs; _d < _e.length; _d++) {
            var item = _e[_d];
            ctx.save();
            ctx.beginPath();
            if (this.nodes.length === 1 && (this.nodes[0].rotate || this.rotate)) {
                ctx.translate(item.x, item.y);
                ctx.rotate(((this.nodes[0].rotate + this.rotate) * Math.PI) / 180);
                ctx.translate(-item.x, -item.y);
            }
            ctx.fillRect(item.x - 4.5, item.y - 4.5, 8, 8);
            ctx.strokeRect(item.x - 5.5, item.y - 5.5, 10, 10);
            ctx.restore();
        }
        ctx.restore();
    };
    ActiveLayer.prototype.getDockWatchers = function () {
        if (this.nodes.length === 1) {
            this.dockWatchers = this.nodeRects[0].toPoints();
            this.dockWatchers.unshift(this.nodeRects[0].center);
            return;
        }
        if (!this.rect) {
            return;
        }
        this.dockWatchers = this.rect.toPoints();
        this.dockWatchers.unshift(this.rect.center);
    };
    ActiveLayer.prototype.alignNodes = function (align) {
        switch (align) {
            case 'left':
                for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
                    var item = _a[_i];
                    item.rect.x = this.rect.x;
                    item.rect.floor();
                    item.rect.calceCenter();
                    item.init();
                    this.updateChildren(item);
                }
                break;
            case 'right':
                for (var _b = 0, _c = this.nodes; _b < _c.length; _b++) {
                    var item = _c[_b];
                    item.rect.x = this.rect.ex - item.rect.width;
                    item.rect.floor();
                    item.rect.calceCenter();
                    item.init();
                    this.updateChildren(item);
                }
                break;
            case 'top':
                for (var _d = 0, _e = this.nodes; _d < _e.length; _d++) {
                    var item = _e[_d];
                    item.rect.y = this.rect.y;
                    item.rect.floor();
                    item.rect.calceCenter();
                    item.init();
                    this.updateChildren(item);
                }
                break;
            case 'bottom':
                for (var _f = 0, _g = this.nodes; _f < _g.length; _f++) {
                    var item = _g[_f];
                    item.rect.y = this.rect.ey - item.rect.height;
                    item.rect.floor();
                    item.rect.calceCenter();
                    item.init();
                    this.updateChildren(item);
                }
                break;
            case 'center':
                for (var _h = 0, _j = this.nodes; _h < _j.length; _h++) {
                    var item = _j[_h];
                    item.rect.x = this.rect.center.x - item.rect.width / 2;
                    item.rect.floor();
                    item.rect.calceCenter();
                    item.init();
                    this.updateChildren(item);
                }
                break;
            case 'middle':
                for (var _k = 0, _l = this.nodes; _k < _l.length; _k++) {
                    var item = _l[_k];
                    item.rect.y = this.rect.center.y - item.rect.height / 2;
                    item.rect.floor();
                    item.rect.calceCenter();
                    item.init();
                    this.updateChildren(item);
                }
                break;
        }
        this.updateLines();
    };
    return ActiveLayer;
}());
exports.ActiveLayer = ActiveLayer;
//# sourceMappingURL=activeLayer.js.map